[협업]:
- Git을 통한 협업을 다룬다.
- Terraform 실행 시에 공유 제외 대상 (.gitignore)
  - *.terraform: init 실행 시에 작성
  - *.tfstate: 프로비저닝 결과 데이터 소스 정보
  - *.tfvars:  프로비저닝 시에 적용할 변수 값을 보관하는 파일
  - secret 관련 파일들
  - *.terraformrc: 작업자의 CLI 설정 파일

- git 다수 작업자가 협업할 때 pull/push 충돌
  - 로컬, 리모트 저장소 간에 동일한 변동사항이 생기면, git pull 했을 때 충돌이 발생한다
  > 충돌되는 내용을 적절히 수정해서 다시 푸시한다.

- 자연스러운 리뷰 / 메인스트림(main branch) 병합되도록 git을 관리하는 방법
  > 코드 수정 시에는 브랜치(branch)를 이용한다
  [작업자 코드 작성 시 절차]:
  (1) branch 생성&전환: git checkout [New branch]
  (2) branch 전환 확인: git branch
  (3) 작업 브랜치에 push: branch push origin [New branch]
  (4) Pull request: 깃허브에서 Create pull request 버튼을 누른다 (요청 사유 기재 필수)
    - 풀 리퀘스트: 관리자에게 자신이 수정한 내용을 메인 코드에 병합하도록 요청하는 행위
  (5) 관리자(저장소 쓰기 권한 있는 사람) [New branch]를 기존 코드에 머지하거나 반려한다.
  (6) 머지를 승인 받았을 경우, 작업자는 메인 브런치로 이동하여 git pull을 수행한다
  (7) 작업용 브런치[New branch]를 삭제한다: git branch -d [New branch]

- State 백엔드: Terraform의 State를 저장/공유/관리하는 공간
  - AWS의 경우 S3를 사용하고, 하시코프는 HCP Terraform을 제공한다. (State 관리 기능 무료)
  - app.terraform.io 접속 후 token key 발급
    (1) 계정 생성
    (2) Organization 생성
    (3) 쉘에서 terraform login 명령 후 yes 
    (4) (3)번 후에 자동으로 열리는 브라우저에서 토큰 발급
    (5) 쉘에 발급된 토큰 입력하기
    >>>> [?] 로그인 후에 credentials.tfrc.json 파일이 생성되지 않았음 <<<<


- 공유 State 백엔드를 통해 협업하기
  - 




