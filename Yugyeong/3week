코드 공유와 동기화를 위해 형상 관리 도구가 필요함.

코드와 달리 민감한 정보와 프로비저닝 state 결과를 공유하는 경우 테라폼 프로비저닝 결과에 오류가 일어날 수 있음. 
state 관리를 위한 백엔드 설정 필요.
형상관리를 위한 중앙 저장소와 state  백엔드가 구성되면 개별적으로 프로비저닝 테스트하고 완성된 코드를 공유함. 

VSC
버전 관리 시스템. 
대표적인 도구로 SVM과 GIT이 있다.

공유 제외 대상
.gitigonore로 제외할 대상 정의 

State 백엔드
테라폼의 State를 저장하는 위치를 설정.

프로비저닝 수행 시 비교하는 과정에 사용됨 

백엔드 구성이 없는 경우 state는 local 구성이 기본으로 지속적인 백업을 위해 local 이외의 저장소가 필요함. 
Apply 작업 시에는 state를 다른 작업이 접근하지 못하도록 잠금 
다수가 동일한 state로 접근해 프로비저닝을 할 수 있는 공유 스토리지 필요
격리 환경에 따라 접근 권한 제어 필요
local 이외의 저장소가 필요함.
state가 원격으로 저장되어도 terraform 명령은 마치 state가 로컬에 있는 것처럼 계속 작동함. 

로컬 백엔드와 컨설턴트 백엔드 모두 잠금 api 제공함 
백엔드에 상태가 지속되는 오류가 발생하면 Terraform은 로컬에 상태를 기록. 이는 데이터 손실을 방지하기 위한 것. 이 경우 최종 사용자는 오류가 해결된 후 수동으로 상태를 원격 백엔드로 푸시해야함.

비로컬 백엔드일 경우, 테라폼은 백엔드에 상태를 쓰는 데 실패하여 복구할 수 없는 오류가 발생한 경우를 제외하고는 디스크의 어느 곳에도 상태를 유지하지 않음. 
이 동작은 백엔드의 주요 이점. 민감한 값이 상태에 있는 경우 원격 백엔드를 사용하면 해당 상태가 디스크에 지속되지 않고도 Terraform을 사용할 수 있음.


 ##**수동 상태 풀/푸시**

원격 상태에서 `terraform state pull` 명령을 사용하여 수동으로 상태를 가져올 수도 있습니다. 이렇게 하면 원격 상태가 로드되어 stdout으로 출력됨. 이를 파일에 저장하거나 다른 작업을 수행하도록 선택가능.

`terraform state push` 를 사용하여 상태를 수동으로 쓸 수도 있음. **이는 매우 위험하므로 가능하면 피해야 함.** 
이렇게 하면 원격 상태를 덮어씀. 필요한 경우 수동으로 수정하는 데 사용할 수 있음.

수동으로 상태를 푸시할 때 테라폼은 잠재적으로 위험한 상황으로부터 사용자를 보호하려고 시도:

- **다른 계보**: “계보”는 스테이트가 생성될 때 스테이트에 할당된 고유 ID입니다.
계보가 다르면 상태가 서로 다른 시간에 생성되었다는 뜻이며, 다른 상태를 수정하고 있을 가능성이 높습니다. 테라폼에서는 이를 허용하지 않음.
- **상위 직렬**: 모든 스테이트에는 단조롭게 증가하는 일련 번호가 있습니다. 
대상 스테이트의 일련 번호가 더 높으면, 작성하려는 스테이트 이후 변경 사항이 발생했음을 의미하므로 
Terraform은 해당 스테이트의 작성을 허용하지 않습니다.


 `-force` 플래그를 사용하여 이 두 가지 보호 기능을 모두 무시 가능.
`force` 플래그를 사용하더라도 덮어쓰기를 강제로 수행하기 전에 `terraform state pull` 상태 백업을 만드는 것이 좋음.
